---
- name: Configure MongoDB Admin User
  hosts: n1
  become: true
  vars:
    mongodb_primary_ip: "172.31.86.23"
    mongodb_admin_user: "Eniola"
    mongodb_admin_password: "admin123!"
    mongodb_restart_timeout: 60
    mongodb_connection_timeout: 30

  tasks:
    - name: Ensure PyMongo is installed
      pip:
        name: pymongo
        executable: pip3
        state: present

    - name: Check MongoDB authentication status
      shell: |
        grep -A1 "security:" /etc/mongod.conf || echo "auth_not_found"
      args:
        executable: /bin/bash
      register: auth_status
      changed_when: false
      ignore_errors: true

    - name: Temporarily disable authentication if enabled
      block:
        - name: Backup mongod.conf
          copy:
            src: /etc/mongod.conf
            dest: /etc/mongod.conf.bak
            remote_src: true

        - name: Disable authentication
          replace:
            path: /etc/mongod.conf
            regexp: '(?m)^(\s*)authorization:\s*enabled'
            replace: '\1# authorization: disabled_temp'

        - name: Restart MongoDB
          service:
            name: mongod
            state: restarted
          async: "{{ mongodb_restart_timeout }}"
          poll: 0

        - name: Verify MongoDB is reachable
          wait_for:
            host: "{{ mongodb_primary_ip }}"
            port: 27017
            timeout: "{{ mongodb_connection_timeout }}"
            delay: 5

      when: "'authorization: enabled' in auth_status.stdout"

    - name: Create admin user
      community.mongodb.mongodb_user:
        login_host: "{{ mongodb_primary_ip }}"
        login_port: 27017
        database: admin
        name: "{{ mongodb_admin_user }}"
        password: "{{ mongodb_admin_password }}"
        roles: "root"
        state: present
      register: user_creation
      retries: 3
      delay: 5

    - name: Re-enable authentication if needed
      block:
        - name: Restore auth config
          replace:
            path: /etc/mongod.conf
            regexp: '# authorization: disabled_temp'
            replace: 'authorization: enabled'

        - name: Restart MongoDB
          service:
            name: mongod
            state: restarted

        - name: Verify MongoDB is secure
          command: >
            mongo --host "{{ mongodb_primary_ip }}"
            --eval "db.auth('{{ mongodb_admin_user }}', '{{ mongodb_admin_password }}'); db.adminCommand({ping: 1})"
          register: mongo_auth_test
          changed_when: false
          failed_when: "mongo_auth_test.rc != 0 or 'ok' not in mongo_auth_test.stdout"

      when: "'authorization: enabled' in auth_status.stdout and user_creation is succeeded"
...